rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isTutor() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'tutor';
    }
    
    function isStudent() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'student';
    }

    // Users collection
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && isOwner(userId);
      allow update: if isAuthenticated() && isOwner(userId);
      allow delete: if false;
    }

    // Tutors collection
    match /tutors/{tutorId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && isOwner(tutorId) && isTutor();
      allow update: if isAuthenticated() && isOwner(tutorId) && isTutor();
      allow delete: if false;
    }

    // Sessions collection
    match /sessions/{sessionId} {
      allow read: if isAuthenticated() && (
        isOwner(resource.data.tutorId) || 
        isOwner(resource.data.studentId) ||
        request.auth.uid in resource.data.participants
      );
      allow create: if isAuthenticated() && (
        isStudent() || 
        isTutor()
      );
      allow update: if isAuthenticated() && (
        isOwner(resource.data.tutorId) || 
        isOwner(resource.data.studentId) ||
        request.auth.uid in resource.data.participants
      );
      allow delete: if false;
    }
  }
} 